name: Unit Testing

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
      - testnet
  push:
    branches:
      - main
      - testnet

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      contracts-changed: ${{ steps.changes.outputs.contracts }}
      utils-changed: ${{ steps.changes.outputs.utils }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      lambda-changed: ${{ steps.changes.outputs.lambda }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check for Changes
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            frontend:
              - 'apps/frontend/**'
            contracts:
              - 'packages/contracts/**'
            utils:
              - 'packages/utils/**'
            backend:
              - 'apps/backend/**'
            lambda:
              - 'packages/lambda/**'

  run-unit-tests:
    name: Unit Testing
    runs-on: ubuntu-latest
    needs: check-changes
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node v20
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: "yarn"

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      # Restore when enabling steps that involve smart contract compilation
      # - name: Cache Solidity compilers
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.cache/hardhat-nodejs
      #     key: ${{ runner.os }}-solc-${{ hashFiles('./packages/contracts/hardhat.config.ts') }}
      #     restore-keys: |
      #       ${{ runner.os }}-solc-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      # Disabled Global and Frontend unit tests for now as they are not working
      # Contract tests should be run separately for each shard on the next step

      # Run global unit tests if contract or utils changes are detected
      # - name: Global Unit Tests
      #   if: needs.check-changes.outputs.contracts-changed == 'true' || needs.check-changes.outputs.utils-changed == 'true'
      #   run: yarn test

      # Run Frontend unit tests if frontend, contracts, or utils changes are detected
      # - name: Frontend Unit Tests
      #   if: needs.check-changes.outputs.frontend-changed == 'true' || needs.check-changes.outputs.contracts-changed == 'true' || needs.check-changes.outputs.utils-changed == 'true'
      #   run: yarn test --filter=frontend

      # Run Backend unit tests only if there are backend changes and no contracts/utils changes
      - name: Backend Unit Tests
        if: needs.check-changes.outputs.backend-changed == 'true' && needs.check-changes.outputs.contracts-changed != 'true' && needs.check-changes.outputs.utils-changed != 'true'
        run: yarn test --filter=backend

      # Run Lambda unit tests only if there are lambda changes and no contracts/utils changes
      # - name: Lambda Unit Tests
      #   if: needs.check-changes.outputs.lambda-changed == 'true' && needs.check-changes.outputs.contracts-changed != 'true' && needs.check-changes.outputs.utils-changed != 'true'
      #   run: yarn test --filter=lambda

  run-contract-tests:
    name: SC Test ${{ matrix.label }}
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.contracts-changed == 'true'
    env:
      NODE_OPTIONS: --max-old-space-size=8192
    strategy:
      fail-fast: false
      matrix:
        include:
          - shard: shard0
            label: B3TR Token & Multi Sig
          - shard: shard2
            label: Emissions
          - shard: shard3a
            label: Available for Assignment
          - shard: shard3b
            label: Galaxy Member
          - shard: shard4a
            label: Governor & TimeLock
          - shard: shard4b
            label: Governance - Voting Power
          - shard: shard4c
            label: Governance - Milestone Creation
          - shard: shard4d
            label: Governance - Proposer Requirement
          - shard: shard4e
            label: Governance - Compatibility & Thresholds
          - shard: shard4f
            label: Governance - Upgrades
          - shard: shard5
            label: Node Management
          - shard: shard6
            label: TimeLock
          - shard: shard7
            label: Treasury
          - shard: shard8
            label: VeBetterPassport
          - shard: shard8a
            label: VeBetterPassport - Upgrade
          - shard: shard8b
            label: VeBetterPassport - Signaling
          - shard: shard8c
            label: VeBetterPassport - Reset Signal Count
          - shard: shard9
            label: VOT3
          - shard: shard10
            label: VoterRewards
          - shard: shard10a
            label: VoterRewards - Upgrade
          - shard: shard10b
            label: VoterRewards - Relayer Claim Rewards
          - shard: shard11
            label: X2EarnCreator
          - shard: shard12
            label: X2EarnRewardsPool
          - shard: shard13
            label: X-Allocation Pool
          - shard: shard14
            label: X-Allocation Voting
          - shard: shard14a
            label: X-Allocation Voting - Upgrade
          - shard: shard14b
            label: X-Allocation Voting - Auto Voting
          - shard: shard15
            label: X-Apps
          - shard: shard16
            label: VeBetterPassport Additional Tests
          - shard: shard17a
            label: X-Apps Additional Tests A
          - shard: shard17b
            label: X-Apps Additional Tests B
          - shard: shard18
            label: RelayerRewardsPool
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node v20
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: "yarn"

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Cache Solidity compilers
        uses: actions/cache@v3
        with:
          path: ~/.cache/hardhat-nodejs
          key: ${{ runner.os }}-solc-${{ hashFiles('./packages/contracts/hardhat.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-solc-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Set Shard Environment Variable
        run: echo "SHARD=${{ matrix.shard }}" >> $GITHUB_ENV

      - name: Run Unit Tests and Check Coverage for ${{ matrix.label }}
        run: yarn test:coverage:solidity

      - name: Upload Coverage for ${{ matrix.label }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.shard }}
          path: packages/contracts/coverage/coverage-final.json

  combine-coverage:
    name: Combine Coverage Reports
    runs-on: ubuntu-latest
    needs: run-contract-tests
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Use Node v20
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: "yarn"

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            packages/*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies at Root
        run: yarn install --frozen-lockfile

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: packages/contracts/coverage-shards

      - name: Debug Downloaded Artifacts
        run: ls -la packages/contracts/coverage-shards

      - name: Merge Coverage Reports
        working-directory: packages/contracts
        run: npx ts-node scripts/helpers/merge-coverage.ts

      - name: Create .nyc_output Directory
        run: mkdir -p packages/contracts/.nyc_output

      - name: Generate Final Coverage Report
        working-directory: packages/contracts
        run: yarn coverage:report

      - name: Upload Unified Coverage Report to Codecov
        uses: codecov/codecov-action@v4
        with:
          directory: packages/contracts/coverage/
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  run-slither:
    name: Slither Analysis
    runs-on: ubuntu-latest
    needs: check-changes
    if: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Use Node v20
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: "yarn"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Cache Solidity compilers
        uses: actions/cache@v3
        with:
          path: ~/.cache/hardhat-nodejs
          key: ${{ runner.os }}-solc-${{ hashFiles('./packages/contracts/hardhat.config.ts') }}
          restore-keys: |
            ${{ runner.os }}-solc-

      - name: Compile contracts
        run: yarn contracts:compile

      - name: Run Slither
        uses: crytic/slither-action@v0.4.0
        id: slither
        with:
          ignore-compile: true
          target: "packages/contracts/"
          solc-version: "0.8.20"
          fail-on: none
          slither-args: --filter-paths "(openzeppelin|mocks|interfaces|deprecated|templates)" --exclude-informational --exclude-optimization --checklist --markdown-root ${{ github.server_url }}/${{ github.repository }}/blob/${{ github.sha }}/

      - name: Upload Slither report
        uses: actions/upload-artifact@v4
        with:
          name: slither-report
          path: slither-report.md

      - name: Create/update checklist as PR comment
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          REPORT: ${{ steps.slither.outputs.stdout }}
        with:
          script: |
            const script = require('.github/scripts/comment')
            const header = '# Slither report'
            const body = process.env.REPORT
            await script({ github, context, header, body })
